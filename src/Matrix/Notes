MinPathSum:
	1. initialize rows and cols
	 for(int i=1; i<n; i++){
	        solution[i][0] = matrix[i][0]+ solution[i-1][0];
	        solution[0][j] = matrix[0][j]+ solution[0][j-1];
	    }
	2. Math.min(dp[i][j-1],dp[i-1][j]) + grid[i][j];
	
	
Unique paths:
  //Arrays.fill(arr,1);
  result[i][j] = result[i-1][j] + result[i][j-1]; //return return result[m-1][n-1];
  
  
Minimal cost path (allowed):
    
    
	solution[i][j] =   matrix[i][j]+minimum(solution[i-1][j], solution[i][j-1], solution[i-1][j-1]);

Backtracking 
=============
	
Word Search

Search robot path

BFS
-----
Que entry calculation:
val = row * grid[0].length + col
row = val/grid[0].length  col=val%grid[0].length
