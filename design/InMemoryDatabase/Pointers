
KEY VALUE STORAGE DESIGN CONSIDERATIONS
=======================================

1. USING A HASH TABLE MIGHT GET RUN OUT OF MEMORY
2. STORE IN FILE SYSTEM AND PUSH TO CACHE WHEN NECESSARY
3. SHARD THE KEYS TO M MACHINES
4. REPLICA PROTECTS MACHINE FROM DOWNTIME
5. ANY UPDATE UPDATE THE FILE SYSTEM AND THEN UPDATE THE CACHE
6. REDUCE CACHE MISS

CONSISTANCY :

1. KEEP COMMIT LOG FOR EACH MACHINE


READ THROUGHPUT :
1. SHOULD SUPPORT LARGE READ THROUGHPUT

2. TAKE ADVANTAGE OF MEMORY. GET IN TO MEMORY TO REDUCE READ THROUGHPUT

CONSISTANCY
APPROACH 1 : KEEP COMMIT LOGS FOR EACH MACHINE BEFORE UPDATE
             A QUEUE CAN PROCESS THESE LOGS TO UPDATE SO THAT WE CAN RECOVER
             
APPROACH 2 : CO-ORDINATOR CAN KEEP A COPY WHICH CAN RETRY THE OPERATION IF FAILS


DISTRIBUTED LOCKING :
1. USE PAXOS ONLY ONE LEADER UPDATES
https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html


