https://www.educative.io/courses/grokking-the-system-design-interview/m2yDVZnQ8lG

Requirements:
1. Upload photos
2. Follow


Design Considerations:
1. Efficient storage
2. Low latency
3. Reliable


High Level Design:
1. User uploads to Image hosting system
2. Image storage, metadata storage


Database Design:
1. User - UID, Name etc
2. Photo - PhotoID, UserID
3. UserFollow - UserID1, UserID2

Component Design:
1. Upload Service with redundancy
2. Download Service with redundancy
3. Image Storage

Consideration:
1. User redundancy to avoid SPOF
2. Sharding based on UserID Or PhotoID
Sharding based on UserID can create hot user issue
Can use Sharding by PhotoID. ID can be generated by a highly available DB or distributed db
Can use key generation service to generate keys

Ranking and Newsfeedgeneration:
1. Latency can be high when ranking multiple photos
2. Can pregenerate news feed and store in seperate table
3. Photos can be sorted by using epoch time. The photo id can have the format epochtime+.
ID will be autoincrementing


Sending news feed:
1. Pull - Clients pull  Cons: empty response most of time
2.Push - Long poll. Will keep server busy for famous users due to large followers
3. Hybrid - Can pull for famous users and push for regular users

Caching:
LRU Cache to discard least recently used
Can make the cache more intelligent 20% of high volume photo and data


1. Capacity estimation 
	Letâ€™s assume we have 500M total users, with 1M daily active users.
	2M new photos every day, 23 new photos every second.
	Average photo file size => 200KB
	Total space required for 1 day of photos
	2M * 200KB => 400 GB
	Total space required for 10 years:
	400GB * 365 (days a year) * 10 (years) ~= 1425TB
	
2. Can use no-sql db for easy to scale

3. Have redundant databases for reliability

4. Sharding based on UserID or PhotoID

5. Caching(LRU Cache) and Load balancing